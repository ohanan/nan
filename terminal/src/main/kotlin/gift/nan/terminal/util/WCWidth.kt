package gift.nan.terminal.util

object WCWidth {
    operator fun get(ucs: Int): Int {
        return when {
            ucs == 0 -> 0
            ucs < 32 || (ucs in 0x7f..159) -> -1
            biSearch(ucs) -> 0
            ucs >= 0x1100 -> when {
                ucs <= 0x115f || ucs == 0x2329 || ucs == 0x232a -> 2
                (ucs in 0x2e80..0xa4cf && ucs != 0x303f) -> 2
                ucs in 0xac00..0xd7a3 -> 2
                ucs in 0xf900..0xfaff -> 2
                ucs in 0xfe10..0xfe19 -> 2
                ucs in 0xfe30..0xfe6f -> 2
                ucs in 0xff00..0xff60 -> 2
                ucs in 0xffe0..0xffe6 -> 2
                ucs in 0x20000..0x2fffd -> 2
                ucs in 0x30000..0x3fffd -> 2
                else -> 1
            }
            else -> 1
        }
    }

    private val combining = arrayOf(
        0x0300 to 0x036F,
        0x0483 to 0x0486,
        0x0488 to 0x0489,
        0x0591 to 0x05BD,
        0x05BF to 0x05BF,
        0x05C1 to 0x05C2,
        0x05C4 to 0x05C5,
        0x05C7 to 0x05C7,
        0x0600 to 0x0603,
        0x0610 to 0x0615,
        0x064B to 0x065E,
        0x0670 to 0x0670,
        0x06D6 to 0x06E4,
        0x06E7 to 0x06E8,
        0x06EA to 0x06ED,
        0x070F to 0x070F,
        0x0711 to 0x0711,
        0x0730 to 0x074A,
        0x07A6 to 0x07B0,
        0x07EB to 0x07F3,
        0x0901 to 0x0902,
        0x093C to 0x093C,
        0x0941 to 0x0948,
        0x094D to 0x094D,
        0x0951 to 0x0954,
        0x0962 to 0x0963,
        0x0981 to 0x0981,
        0x09BC to 0x09BC,
        0x09C1 to 0x09C4,
        0x09CD to 0x09CD,
        0x09E2 to 0x09E3,
        0x0A01 to 0x0A02,
        0x0A3C to 0x0A3C,
        0x0A41 to 0x0A42,
        0x0A47 to 0x0A48,
        0x0A4B to 0x0A4D,
        0x0A70 to 0x0A71,
        0x0A81 to 0x0A82,
        0x0ABC to 0x0ABC,
        0x0AC1 to 0x0AC5,
        0x0AC7 to 0x0AC8,
        0x0ACD to 0x0ACD,
        0x0AE2 to 0x0AE3,
        0x0B01 to 0x0B01,
        0x0B3C to 0x0B3C,
        0x0B3F to 0x0B3F,
        0x0B41 to 0x0B43,
        0x0B4D to 0x0B4D,
        0x0B56 to 0x0B56,
        0x0B82 to 0x0B82,
        0x0BC0 to 0x0BC0,
        0x0BCD to 0x0BCD,
        0x0C3E to 0x0C40,
        0x0C46 to 0x0C48,
        0x0C4A to 0x0C4D,
        0x0C55 to 0x0C56,
        0x0CBC to 0x0CBC,
        0x0CBF to 0x0CBF,
        0x0CC6 to 0x0CC6,
        0x0CCC to 0x0CCD,
        0x0CE2 to 0x0CE3,
        0x0D41 to 0x0D43,
        0x0D4D to 0x0D4D,
        0x0DCA to 0x0DCA,
        0x0DD2 to 0x0DD4,
        0x0DD6 to 0x0DD6,
        0x0E31 to 0x0E31,
        0x0E34 to 0x0E3A,
        0x0E47 to 0x0E4E,
        0x0EB1 to 0x0EB1,
        0x0EB4 to 0x0EB9,
        0x0EBB to 0x0EBC,
        0x0EC8 to 0x0ECD,
        0x0F18 to 0x0F19,
        0x0F35 to 0x0F35,
        0x0F37 to 0x0F37,
        0x0F39 to 0x0F39,
        0x0F71 to 0x0F7E,
        0x0F80 to 0x0F84,
        0x0F86 to 0x0F87,
        0x0F90 to 0x0F97,
        0x0F99 to 0x0FBC,
        0x0FC6 to 0x0FC6,
        0x102D to 0x1030,
        0x1032 to 0x1032,
        0x1036 to 0x1037,
        0x1039 to 0x1039,
        0x1058 to 0x1059,
        0x1160 to 0x11FF,
        0x135F to 0x135F,
        0x1712 to 0x1714,
        0x1732 to 0x1734,
        0x1752 to 0x1753,
        0x1772 to 0x1773,
        0x17B4 to 0x17B5,
        0x17B7 to 0x17BD,
        0x17C6 to 0x17C6,
        0x17C9 to 0x17D3,
        0x17DD to 0x17DD,
        0x180B to 0x180D,
        0x18A9 to 0x18A9,
        0x1920 to 0x1922,
        0x1927 to 0x1928,
        0x1932 to 0x1932,
        0x1939 to 0x193B,
        0x1A17 to 0x1A18,
        0x1B00 to 0x1B03,
        0x1B34 to 0x1B34,
        0x1B36 to 0x1B3A,
        0x1B3C to 0x1B3C,
        0x1B42 to 0x1B42,
        0x1B6B to 0x1B73,
        0x1DC0 to 0x1DCA,
        0x1DFE to 0x1DFF,
        0x200B to 0x200F,
        0x202A to 0x202E,
        0x2060 to 0x2063,
        0x206A to 0x206F,
        0x20D0 to 0x20EF,
        0x302A to 0x302F,
        0x3099 to 0x309A,
        0xA806 to 0xA806,
        0xA80B to 0xA80B,
        0xA825 to 0xA826,
        0xFB1E to 0xFB1E,
        0xFE00 to 0xFE0F,
        0xFE20 to 0xFE23,
        0xFEFF to 0xFEFF,
        0xFFF9 to 0xFFFB,
        0x10A01 to 0x10A03,
        0x10A05 to 0x10A06,
        0x10A0C to 0x10A0F,
        0x10A38 to 0x10A3A,
        0x10A3F to 0x10A3F,
        0x1D167 to 0x1D169,
        0x1D173 to 0x1D182,
        0x1D185 to 0x1D18B,
        0x1D1AA to 0x1D1AD,
        0x1D242 to 0x1D244,
        0xE0001 to 0xE0001,
        0xE0020 to 0xE007F,
        0xE0100 to 0xE01EF
    )

    private fun biSearch(ucs: Int): Boolean {
        val table = combining
        var max = table.size - 1
        if (ucs < table[0].first || ucs > table[max].second) return false
        var min = 0
        var mid: Int
        while (max >= min) {
            mid = (min + max) / 2
            when {
                ucs > table[mid].second -> min = mid + 1
                ucs < table[mid].first -> max = mid - 1
                else -> return true
            }
        }
        return false
    }
}